@page "/documents"
@using EtendueERP.Models.SageAPI
@using Microsoft.EntityFrameworkCore
@using Data
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject SageAPIContext db
@using AntDesign

                        
<Layout>
    <Sider Breakpoint="@BreakpointType.Lg"
           CollapsedWidth="64"
           @bind-Collapsed=@collapsed>
        <div class="logo" />
        <RadzenPanelMenu Style="height: 100%;" Click="@(args => MenuClicked(args.Value.ToString()))">
            @if (DO_Domaine == 0) {
             <RadzenPanelMenuItem Text="Devis" Icon="account_circle" Value="0" Selected="IsSelected(0)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Bon de commande" Icon="line_weight" Value="1" Selected="IsSelected(1)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Préparation de livraison" Icon="attach_file" Value="2" Selected="IsSelected(2)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Bon de livraison" Icon="perm_media" Value="3" Selected="IsSelected(3)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Bon de retour" Icon="announcement" Value="4" Selected="IsSelected(4)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Facture" Icon="announcement" Value="6" Selected="IsSelected(6)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Facture comptabilisée" Icon="announcement" Value="7" Selected="IsSelected(7)"></RadzenPanelMenuItem>
            }
            else if(DO_Domaine == 1) {
            <RadzenPanelMenuItem Text="Demande d'achat" Icon="account_circle" Value="10" Selected="IsSelected(10)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Préparation de commande" Icon="line_weight" Value="11" Selected="IsSelected(11)"></RadzenPanelMenuItem>
                <RadzenPanelMenuItem Text="Bon de commande" Icon="attach_file" Value="12" Selected="IsSelected(12)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Bon de livraison" Icon="perm_media" Value="13" Selected="IsSelected(13)"></RadzenPanelMenuItem>
                <RadzenPanelMenuItem Text="Bon de retour" Icon="announcement" Value="14" Selected="IsSelected(14)"></RadzenPanelMenuItem>
                <RadzenPanelMenuItem Text="Facture" Icon="announcement" Value="16" Selected="IsSelected(16)"></RadzenPanelMenuItem>
                <RadzenPanelMenuItem Text="Facture comptabilisée" Icon="announcement" Value="17" Selected="IsSelected(17)"></RadzenPanelMenuItem>
            }
            else if(DO_Domaine == 2){
            <RadzenPanelMenuItem Text="Mouvement d'entrée" Icon="account_circle" Value="20" Selected="IsSelected(20)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Mouvement de sortie" Icon="line_weight" Value="21" Selected="IsSelected(21)"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Mouvement de transfert" Icon="attach_file" Value="23" Selected="IsSelected(23)"></RadzenPanelMenuItem>
            }

        </RadzenPanelMenu>     
    </Sider>
    <Layout>
        <Content Style=" margin: 10px 10px 0;">
            <div class="site-layout-background" style="padding: 24px; min-height: 360px">
                <Tabs DefaultActiveKey="0" Type="@TabType.EditableCard" HideAdd @bind-ActiveKey="activekey">
                    <TabPane Key="0"  Tab="@Title" Closable="false">
                        <RadzenAccordion>
                            <Items>
                                <RadzenAccordionItem Text="Filtrer" Icon="filter_list_alt">
                                    <GridRow>
                                        <GridCol Xs="24" Md="3" class="ant-form-item-label">Recherche</GridCol>
                                        <GridCol Xs="24" Md="7"><Input Size="@AntSizeLDSType.Small" Style="Width: 100%;" @oninput="@(args => OnInput(args.Value.ToString()))" @bind-Value="@vl_text" /></GridCol>
                                        <GridCol Xs="24" Md="3" class="ant-form-item-label">Etat Solde</GridCol>
                                        <GridCol Xs="24" Md="4">
                                                            <Select Size="@AntSizeLDSType.Small" OnSelectedItemChanged="UpdateGrid" TItem="short?" TItemValue="short?" @bind-Value="@vl_solde">
                                                <SelectOptions>
                                                    <SelectOption TItem="short?" TItemValue="short?" Value="0" Label="   Tout" />
                                                    <SelectOption TItem="short?" TItemValue="short?" Value="1" Label="Soldé" />
                                                    <SelectOption TItem="short?" TItemValue="short?" Value="2" Label="Non soldé" />
                                                </SelectOptions>
                                            </Select>
                                        </GridCol>
                                        <GridCol Xs="24" Md="3" class="ant-form-item-label">Sommeil</GridCol>
                                        <GridCol Xs="24" Md="4">
                                                            <Select Size="@AntSizeLDSType.Small" OnSelectedItemChanged="UpdateGrid" TItem="short?" TItemValue="short?" @bind-Value="@vl_sommeil">
                                                <SelectOptions>
                                                    <SelectOption TItem="short?" TItemValue="short?" Value="0" Label="   Tout" />
                                                    <SelectOption TItem="short?" TItemValue="short?" Value="1" Label="Actif" />
                                                    <SelectOption TItem="short?" TItemValue="short?" Value="2" Label="En sommeil" />
                                                </SelectOptions>
                                            </Select>
                                        </GridCol>
                                    </GridRow>
                                </RadzenAccordionItem>
                            </Items>
                            
                        </RadzenAccordion>
                        <RadzenDataGrid CellContextMenu="@OnCellContextMenu" AllowRowSelectOnRowClick="true" RowDoubleClick="@(args => RowDoubleClicked(args.Data))" @bind-Value=@selecteditems Style="min-height: 200px;" AllowPaging="true" IsLoading="_loading" TItem="API_V_DOCENTETE" Data="@items" PageSize="40" Responsive>
                                <Columns>
                                <RadzenDataGridColumn TItem="API_V_DOCENTETE" Property="DO_Date" Title="Date" Visible="@(DODate)" FormatString="{0:d}"></RadzenDataGridColumn>
                                    <RadzenDataGridColumn  TItem="API_V_DOCENTETE" Property="DO_Piece" Title="Pièce" Visible="@(DOPiece)"></RadzenDataGridColumn>
                                    <RadzenDataGridColumn  TItem="API_V_DOCENTETE" Property="DO_Tiers" Title="Numéro" Visible="@(DOTiers)"></RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="API_V_DOCENTETE" Property="CT_Intitule" Title="Intitulé" Width="200px" Visible="@(CTIntitule)"></RadzenDataGridColumn>
                                    <RadzenDataGridColumn  TItem="API_V_DOCENTETE" Property="CA_Num" Title="Affaire" Visible="@(CANum)"></RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="API_V_DOCENTETE" Property="CA_Intitule" Title="Affaire Intitulé" Width="190px" Visible="@(CAIntitule)"></RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="API_V_DOCENTETE" Property="DL_MontantHT" Title="Montant HT" Visible="@(DLMontantHT)" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="API_V_DOCENTETE" Property="DL_MontantTTC" Title="Montant TTC" Visible="@(DLMontantTTC)" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="API_V_DOCENTETE" Property="DL_MontantTVA" Title="Montant TVA" Visible="@(DLMontantTVA)" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                                    <RadzenDataGridColumn  TItem="API_V_DOCENTETE" Property="DE_Intitule" Title="Dépot" Visible="@(DEIntitule)"></RadzenDataGridColumn>
                                    <RadzenDataGridColumn  TItem="API_V_DOCENTETE" Property="CO_Nom" Title="Collaborateur" Visible="@(CONom)"></RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="API_V_DOCENTETE" Property="RC_Montant" Title="Montant Réglé" Visible="@(RCMontant)" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="API_V_DOCENTETE" Property="Reste" Title="Montant Du" Visible="@(Reste)" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                                    <RadzenDataGridColumn  TItem="API_V_DOCENTETE" Property="EtatReglement" Title="Etat" Visible="@(EtatReglement)" />
                                </Columns>

                       </RadzenDataGrid>
                        
                    </TabPane>
                    @if(rows != null) 
                    {
                        foreach (API_V_DOCENTETE row in rows)
                        {
                            <TabPane Key="@row.cbMarq.ToString()" Tab="@(row.DO_Piece + " - " + row.CT_Intitule)" Closable="true">
                                <DocumentsFiche row="@row"/>
                            </TabPane>
                        }
                    }
                </Tabs>
            </div>
        </Content>
    </Layout>
</Layout>
<style>
    #components-layout-demo-responsive .logo {
        height: 32px;
        background: rgba(255, 255, 255, 0.2);
        margin: 16px;
    }

    .site-layout-sub-header-background {
        background: #fff;
    }

    .site-layout-background {
        background: #fff;
    }
</style>


@code {
    //Parameters

    [Parameter] public bool CTNum { get; set; } = true;
    [Parameter] public bool CTIntitule { get; set; } = true;
    [Parameter] public bool DODate { get; set; } = true;
    [Parameter] public bool DOPiece { get; set; } = true;
    [Parameter] public bool DEIntitule { get; set; } = true;
    [Parameter] public bool DLMontantTVA { get; set; } = true;
    [Parameter] public bool DLMontantHT { get; set; } = true;
    [Parameter] public bool DLMontantTTC { get; set; } = true;
    [Parameter] public bool EtatReglement { get; set; } = true;
    [Parameter] public bool Reste { get; set; } = true;
    [Parameter] public bool RCMontant { get; set; } = true;
    [Parameter] public bool CAIntitule { get; set; } = false;
    [Parameter] public bool CONom { get; set; } = true;
    [Parameter] public bool DOTiers { get; set; } = true;
    [Parameter] public bool CANum { get; set; } = true;
    [Parameter] public int CT_Type { get; set; } = 0;
    [Parameter] public int DO_Domaine { get; set; } = 0;
    [Parameter] public string Title { get; set; } = "";
    //End Parameters


    bool collapsed;
    string vl_text;
    short? vl_solde = 0;
    short? vl_sommeil = 0;
    private ICollection<API_V_DOCENTETE> items;
    List<API_V_DOCENTETE> rows = new List<API_V_DOCENTETE>();
    IList<API_V_DOCENTETE> selecteditems;
    int selectedvalue = 0;
    bool _loading = true;
    [Parameter] public ICollection<F_COMPTET> tiers { get; set; }
    [Parameter] public ICollection<F_COMPTEA> affaires { get; set; }
    string activekey = "0";


    protected override async Task OnInitializedAsync()
    {
        if(DO_Domaine == 0) {
            selectedvalue = 0;      
        }
        else if(DO_Domaine == 1) {
            selectedvalue = 10;
        }
        else if(DO_Domaine == 20) {
            selectedvalue = 0; 
        }
        await Task.Run(() => LoadDataAsync(selectedvalue));
    }
    private bool IsSelected(int value) {
        if(value == selectedvalue) {
            return true;
        }
        else {
            return false;
        }
    }

    private async Task LoadDataAsync(int index)
    {
        _loading = true;
        await Task.Delay(1);
        selectedvalue = index;
        activekey = "0";
        items = await Task.FromResult(db.API_V_DOCENTETE.Where(a => a.DO_Type == index).ToList());
        _loading = false;
        await Task.Delay(1);
    }

    protected async Task RowDoubleClicked(API_V_DOCENTETE args)
    {
        rows.Add(args);
        activekey = args.cbMarq.ToString();
    }

    protected async Task MenuClicked(string value)
    {
        await LoadDataAsync(Int16.Parse(value));

    }
    void OnInput(string value)
    {
        UpdateGrid();
        //items = items.Where(a => a.CT_Num.ToUpper().Contains(value.ToUpper()) || a.CT_Intitule.ToUpper().Contains(value.ToUpper())).ToList();
    }
    void UpdateGrid()
    {
        /*items = data;

        if (vl_solde == 1)
        {
            items = items.Where(a => a.SoldeCommercial == 0).ToList();
        }
        else if (vl_solde == 2)
        {
            items = items.Where(a => a.SoldeCommercial != 0).ToList();
        }

        if (vl_sommeil == 1)
        {
            items = items.Where(a => a.CT_Sommeil == 0).ToList();
        }
        else if (vl_sommeil == 2)
        {
            items = items.Where(a => a.CT_Sommeil == 1).ToList();
        }*/
    }
    void OnMenuItemClick(MenuItemEventArgs args)
    {
        if (args.Value.Equals(3) && !args.Value.Equals(4))
        {
            
        }
    }

    void OnCellContextMenu(DataGridCellMouseEventArgs<API_V_DOCENTETE> args) 
    { 
    selecteditems = new List<API_V_DOCENTETE>() { args.Data };
    ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Ajouter" Value="1" Icon="note_add"></RadzenMenuItem>
        <RadzenMenuItem Text="Modifier" Value="2" Icon="edit"></RadzenMenuItem>
        <RadzenMenuItem Text="Dupliquer" Value="3" Icon="content_copy"></RadzenMenuItem>
        <RadzenMenuItem Text="Supprimer" Value="4" Icon="delete"></RadzenMenuItem>
        <RadzenMenuItem Text="Dé-comptabiser" Value="5" Icon="branding_watermark"></RadzenMenuItem>
        <RadzenMenuItem Text="Dé-valider" Value="6" Icon="key"></RadzenMenuItem>
        <RadzenMenuItem Text="Fusionner" Value="7" Icon="merge_type"></RadzenMenuItem>
        <RadzenMenuItem Text="Transformer" Value="8" Icon="published_with_changes"></RadzenMenuItem>
    </RadzenMenu>
    );}

}


































